@mixin box-sizing($value) {
  -moz-box-sizing: $value;
  box-sizing: $value;
}
// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

@mixin widget-outline {
	border-radius: 4px;
	border: 1px solid $color__widget-border;
	box-sizing: border-box;
}
@mixin widgetify {
	@include widget-outline;
	background-color: $color__background-widget;
	list-style: outside none none;
	overflow: hidden;
	padding-left: 0.5rem;
	padding-right: 0.5rem;
}
@mixin button($butcol: $color__background-button, $corner: 2em) {
  background-color: $butcol;
  box-shadow: none;
  text-shadow: none;
	&:hover {
    background-color: $vcsblue;
    color: $color__text-alt;
    & :link {
      color: $color__text-alt;
    }
  }
	@include nolink;
	border-radius: $corner;

}
/*
 * Development helpers
 */
@mixin testing($colour: red) {
	background-color: $colour !important;
}
@mixin size($colour: red) {
	#showsize {
		position: fixed;
		@include pad(15px);
		top: 0;
		@include span(isolate 5 at 6 of 12);
		z-index: 9999999;
    border-radius: 10px;
		&:hover{ @include opacity(0.8);}
		@include susy-breakpoint($smartphone-portrait) {
		&::after {	
			content: '$smartphone-portrait';
		}
		};
		@include susy-breakpoint($smartphone-landscape) {
		&::after {	
			content: '$smartphone-landscape';
		}
		};
		@include susy-breakpoint($tablet-portrait) {
		&::after {	
			content: '$tablet-portrait';
			width: span(2 of 16);
			left: span(2 of 16);
			top:  span(2 of 16);
		}
		};
		@include susy-breakpoint($tablet-landscape) {
		&::after {	
			content: '$tablet-landscape';
		}
		};
		@include susy-breakpoint($desktop) {
		&::after {	
			content: '$desktop';
		}
		};
	};
}	

/*
 * Page layout mixins
 */
@mixin page {
	@include span(full);
	//up to tablet landscap
	@include susy-breakpoint($tablet-portrait) {
		// Tablet-portrait and up
		@include span(14 of 16 nest);
		@include squish(1 of 16);
	};
	@include susy-breakpoint($tablet-landscape) {
		// Tablet-portrait and up
		@include span(14 of 16 nest);
		@include squish(1 of 16);
	};
	@include susy-breakpoint($desktop) {
		@include span(16 of 16 nest);
		@include pad(0.5 of 16);
	}
}

/*
 * extra styling mixins
 */
@mixin radgrad($fadefrom: black, $fadeto: white, $side: top) {
	position: absolute;
	content: "";
	@if $side == "right" {
		top: 3px;
		right: 3px;
		bottom: 3px;
		width: 2px
	    } @else if $side == "left" {
		top: 3px;
		left: 3px;
		bottom: 3px;
		width: 2px
	    } @else if $side == "top" {
		height: 2px;
		top: 3px;
		left:3px;
		right:3px;
	    } @else if $side == "bottom" {
		height: 2px;
		bottom:3px;
		left:3px;
		right:3px;
	}
	@if $fadeto == "clear" {
		$fadeto : rgba(0,0,0,0.03);
	    }
	@if $fadefrom == "clear" {
		$fadefrom : rgba(0,0,0,0.05);
	    }
	
	@include background-image(radial-gradient($fadeto, $fadefrom 65%));
}

@mixin nolink() {
	text-decoration: none;
	background-color: clear !important; 
}

// ----
// Linear Gradient mixin from http://www.sitepoint.com/building-linear-gradient-mixin-sass/
// Sass (v3.4.7)
// Compass (v1.0.1)
// ----

/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }
  
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }
  
  $conversion-map: ( 
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
    
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  
  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
